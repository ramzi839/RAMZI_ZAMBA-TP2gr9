// Generated by dia2code
#ifndef RENDER__LAYER__H
#define RENDER__LAYER__H

#include <vector>
#include "SFML/Graphics.hpp"
#include "SFML/Graphics/Drawable.hpp"
#include "SFML/System/Time.hpp"
#include "SFML/System/Vector2.hpp"
#include "SFML/Graphics/RenderTarget.hpp"
#include "SFML/Graphics/Transformable.hpp"
#include "SFML/Window.hpp"
#include <stdlib.h>

namespace render {
  class Animation;
}

#include "Animation.h"

namespace render {

  /// class Layer - 
  class Layer : public sf::Transformable, public sf::Drawable {
    // Associations
    // Attributes
  public:
    std::vector<Animation> animationList;
  private:
    const Animation* my_animation;
    sf::Time my_frameTime;
    sf::Time my_currentTime;
    std::size_t my_currentFrame;
    const sf::Texture* my_texture;
    sf::Vertex my_vertices[4];
    bool isPaused;
    bool isLooped;
    // Operations
  public:
    Layer ( sf::Time frameTime, bool pause = false, bool loop = true);
    void setAnimation (const Animation& animation);
    const Animation* getAnimation () const;
    void setFrame (std::size_t newFrame, bool resetTime = true);
    void play ();
    void play (const Animation& animation);
    void stop ();
    void pause ();
    Animation getLayerList ( int i);
    void setColor (const sf::Color& color);
    void update (sf::Time deltaTime);
  private:
    virtual void draw (sf::RenderTarget& target, sf::RenderStates states) const;
  };

};

#endif
